<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Quarked testing: Writing tests for Quarkus</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/UEfGntMJ1yk/" /><category term="DevNation" /><category term="Java" /><category term="Kubernetes" /><category term="Quarkus" /><category term="java kubernetes" /><category term="service virtualization" /><category term="test containers" /><category term="test java application" /><author><name>Alex Soto Bueno</name></author><id>https://developers.redhat.com/blog/?p=799987</id><updated>2020-10-12T07:00:10Z</updated><published>2020-10-12T07:00:10Z</published><content type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about testing &lt;a href="https://developers.redhat.com/topics/quarkus/"&gt;Quarkus&lt;/a&gt; applications and services from &lt;a href="https://developers.redhat.com/blog/author/asotobue/"&gt;Alex Soto Bueno&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/author/burrsutter/"&gt;Burr Sutter&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Testing allows you to deliver your application with the confidence that you&amp;#8217;re building the right things and building the things right. Testing also helps developers refactor their code, add a new feature, or fix a bug knowing that nothing else is breaking.&lt;/p&gt; &lt;p&gt;Quarkus brings to the &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; ecosystem a way to develop cloud-first, &lt;a href="https://developers.redhat.com/topics/containers/"&gt;container&lt;/a&gt;-native, &lt;a href="https://developers.redhat.com/topics/serverless-architecture/"&gt;serverless&lt;/a&gt;-focused, and &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;-optimized applications. This is where GraalVM meets Quarkus, bringing server-side and enterprise-capable Java to help you build truly cloud-native apps.&lt;/p&gt; &lt;p&gt;But, how do you test Quarkus applications and services? In this talk, we show how you how. We&amp;#8217;ll look at how to test basic components, mocks, stubs, or (secured) RESTful web APIs. Also, we will cover more advanced topics such as persistence tests, service virtualization, and using containers for testing purposes. Come to this session to learn in practice how to write tests for Quarkus.&lt;/p&gt; &lt;p&gt;Watch the entire talk:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/qQLSZTDODSQ?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Learn more&lt;/h2&gt; &lt;p&gt;Join us at an &lt;a href="https://developers.redhat.com/events/"&gt;upcoming developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;past DevNation Tech Talks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#038;title=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" data-a2a-url="https://developers.redhat.com/blog/2020/10/12/quarked-testing-writing-tests-for-quarkus/" data-a2a-title="Quarked testing: Writing tests for Quarkus"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/12/quarked-testing-writing-tests-for-quarkus/"&gt;Quarked testing: Writing tests for Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/UEfGntMJ1yk" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about testing Quarkus applications and services from Alex Soto Bueno and Burr Sutter. Testing allows you to deliver your application with [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/12/quarked-testing-writing-tests-for-quarkus/"&gt;Quarked testing: Writing tests for Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/12/quarked-testing-writing-tests-for-quarkus/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">799987</post-id><dc:creator>Alex Soto Bueno</dc:creator><dc:date>2020-10-12T07:00:10Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/12/quarked-testing-writing-tests-for-quarkus/</feedburner:origLink></entry><entry><title>CodeReady Containers - Getting Started with OpenShift Container Platform 4.5 and Process Automation Tooling</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Vy-9QYoAvFQ/codeready-containers-ocp-45-with-process-automation-tooling.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="CodeReadyContainers" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-codeready_containers_getting_started_with_openshift_container_platform_4_5_and_process_automation_tooling</id><updated>2020-10-12T05:00:03Z</updated><published>2020-10-12T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-9I8eBXVQklE/X4AnRySlulI/AAAAAAAAxlc/_ndkm7yspeAYfbTO2KDvMIDTdV5L2IZZQCNcBGAsYHQ/s2048/hello-i-m-nik-MAgPyHRO0AA-unsplash.jpg" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="process automation tooling" border="0" data-original-height="1371" data-original-width="2048" height="214" src="https://1.bp.blogspot.com/-9I8eBXVQklE/X4AnRySlulI/AAAAAAAAxlc/_ndkm7yspeAYfbTO2KDvMIDTdV5L2IZZQCNcBGAsYHQ/w320-h214/hello-i-m-nik-MAgPyHRO0AA-unsplash.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;As a cloud-native developer you've &lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo" target="_blank"&gt;installed an OpenShift Container Platform&lt;/a&gt; development environment on your local machine, but what's next?&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;What can you do with the fully stocked container registry provided to you?&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;There is no better way to learn about container technologies, cloud native methods, and container-based application development than getting hands-on with great open technologies.&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;This article targets getting you started on your new &lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo" target="_blank"&gt;OpenShift Container Platform 4.5&lt;/a&gt; by putting the latest process automation developer tooling at your disposal. You'll get started by installing it using the latest available container registry images. After that, if you need more help getting started, try a free online workshop where you can build your first process automation project hands-on.&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;Get started today with new &lt;a href="https://gitlab.com/redhatdemocentral/rhcs-rhpam-install-demo" target="_blank"&gt;developer tooling for process design&lt;/a&gt;, user tasks, forms, rules, and business logic in just a few simple steps.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 data-sourcepos="1:1-3:130"&gt;Process automation developer tooling&lt;/h3&gt;&lt;div data-sourcepos="3:1-4:70" dir="auto"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-8fEVFoNYtFc/X4Am18bwfpI/AAAAAAAAxlU/DHJ_1--K8qUfFiE-dg6V6gqdsOtTuCJMQCNcBGAsYHQ/s2048/crc-rhpam-architecture.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="process automation tooling" border="0" data-original-height="1152" data-original-width="2048" height="180" src="https://1.bp.blogspot.com/-8fEVFoNYtFc/X4Am18bwfpI/AAAAAAAAxlU/DHJ_1--K8qUfFiE-dg6V6gqdsOtTuCJMQCNcBGAsYHQ/w320-h180/crc-rhpam-architecture.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;Let's install the &lt;a href="https://gitlab.com/redhatdemocentral/rhcs-rhpam-install-demo" target="_blank"&gt;Red Hat Process Automation Manager on an OpenShift Container Platform&lt;/a&gt; using the latest provided container catalog image. It delivers fully functioning developer process automation tooling containerized on your OpenShift Container Platform.&lt;br /&gt;&lt;/div&gt;&lt;div data-sourcepos="3:1-4:70" dir="auto"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 data-sourcepos="7:1-9:131"&gt;Install from container catalog&lt;/h3&gt;&lt;div data-sourcepos="9:1-10:83" dir="auto"&gt;There are two options to install and run this project on the OpenShift Container Platform; use your own existing installation or to install on CodeReady Containers which provides you with a local OpenShift cluster.&lt;/div&gt;&lt;ol data-sourcepos="12:1-13:0" dir="auto"&gt;&lt;li data-sourcepos="12:1-13:0"&gt;Ensure you have an OpenShift container based installation, such as one of the following:&lt;/li&gt;&lt;/ol&gt;&lt;ul data-sourcepos="14:3-17:0" dir="auto"&gt;&lt;li data-sourcepos="14:3-15:0"&gt;&lt;div data-sourcepos="14:5-14:116"&gt;your own OpenShift installation, if using this you just need to pass the IP address to the init.{sh|bat} script.&lt;/div&gt;&lt;/li&gt;&lt;li data-sourcepos="16:3-17:0"&gt;&lt;div data-sourcepos="16:5-16:95"&gt;&lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo" target="_blank"&gt;CodeReady Containers Easy Install&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol data-sourcepos="18:1-23:0" dir="auto" start="2"&gt;&lt;li data-sourcepos="18:1-19:0"&gt;&lt;div data-sourcepos="18:4-18:146"&gt;&lt;a href="https://gitlab.com/redhatdemocentral/rhcs-rhpam-install-demo/-/archive/master/rhcs-rhpam-install-demo-master.zip" target="_blank"&gt;Download and unzip this demo.&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&lt;li data-sourcepos="22:1-23:0"&gt;&lt;div data-sourcepos="22:4-22:91"&gt;Run 'init.sh' or 'init.bat' file. 'init.bat' must be run with Administrative privileges&amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;pre class="code highlight" lang="plaintext"&gt;&lt;span class="line" id="LC1" lang="plaintext"&gt; # If using CodeReady Containers Easy Install project, just add the cluster &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC2" lang="plaintext"&gt; # address to HOST_IP variable found at the top of the init.{sh|bat} files:&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC3" lang="plaintext"&gt; #&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC4" lang="plaintext"&gt; # HOST_IP=api.crc.testing &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC5" lang="plaintext"&gt; # &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC6" lang="plaintext"&gt; # Now run the script without any arguments and it uses the hostname:&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC7" lang="plaintext"&gt; #&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC8" lang="plaintext"&gt; $ ./init.sh&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div data-sourcepos="42:1-42:140" dir="auto"&gt;&lt;a href="https://www.blogger.com/blog/post/edit/3868547292717970492/3054799686837756106#" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="red hat process automation manager" border="0" data-original-height="886" data-original-width="1600" height="177" src="https://1.bp.blogspot.com/-vEsuIwWe5xg/XhLsYPZArnI/AAAAAAAAw1w/9NM0V6bfpYEUVxTBUf6R4kw2wloDArxSQCEwYBhgL/w320-h177/rhcs-rhpam-ocp.png" title="process automation tooling" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div data-sourcepos="42:1-42:140" dir="auto"&gt;After some installation magic you can watch and read about in the script log output on your console, it's time to login to your process automation tooling.&lt;/div&gt;&lt;div data-sourcepos="42:1-42:140" dir="auto"&gt;&lt;br /&gt;Get started developing containerized process automation projects here (the address will be generated):&lt;/div&gt;&lt;ul data-sourcepos="44:3-45:0" dir="auto"&gt;&lt;li data-sourcepos="44:3-45:0"&gt;CodeReady Container example: http:rhcs-rhpam-install-demo-appdev-in-cloud.apps-crc.testing/business-central ( u:erics / p:redhatpam1! )&lt;/li&gt;&lt;/ul&gt;&lt;div data-sourcepos="46:1-46:195" dir="auto"&gt;Not sure how to get started with Red Hat Process Automation Manager? Try one of these&amp;nbsp;&lt;a href="https://bpmworkshop.gitlab.io/index-rhpam.html#/1" target="_blank"&gt;online workshops&lt;/a&gt;&amp;nbsp;to build a first project from scratch.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=J1iPmKtJjHg:rVJj6juP_9k:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=J1iPmKtJjHg:rVJj6juP_9k:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=J1iPmKtJjHg:rVJj6juP_9k:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=J1iPmKtJjHg:rVJj6juP_9k:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/J1iPmKtJjHg" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Vy-9QYoAvFQ" height="1" width="1" alt=""/&gt;</content><summary>As a cloud-native developer you've installed an OpenShift Container Platform development environment on your local machine, but what's next? What can you do with the fully stocked container registry provided to you? There is no better way to learn about container technologies, cloud native methods, and container-based application development than getting hands-on with great open technologies. This...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-10-12T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/J1iPmKtJjHg/codeready-containers-ocp-45-with-process-automation-tooling.html</feedburner:origLink></entry><entry><title>Kamelets</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/nSEo7f9PbZY/" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_nicolaferraro" scheme="searchisko:content:tags" /><category term="JBoss Fuse" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><author><name>Nicola Ferraro</name></author><id>searchisko:content:id:jbossorg_blog-kamelets</id><updated>2020-10-12T16:00:00Z</updated><published>2020-10-11T22:00:00Z</published><content type="html">&lt;p&gt;Kamelets are the most important feature released with Apache Camel K 1.2.0. Apart from their cool name, Kamelets represent a significant change in the whole Camel ecosystem, because they introduce new ways of using Apache Camel in the cloud and a novel approach for contributing new connectors.&lt;/p&gt; &lt;h2 id="what-is-a-kamelet"&gt;What is a Kamelet?&lt;/h2&gt; &lt;p&gt;A Kamelet is a “&lt;strong&gt;Kamel&lt;/strong&gt; Route Snipp&lt;strong&gt;et&lt;/strong&gt;”. Before going into the details of what this actually means, let’s make a step backward to add some background context.&lt;/p&gt; &lt;p&gt;Traditionally, the building blocks of Apache Camel have always been the &lt;strong&gt;components&lt;/strong&gt;. Camel users can write complex routes by leveraging the 350+ components that are available in Apache Camel. It’s not a fixed pool: Camel developers and contributors are constantly increasing the collection of supported components at each new release.&lt;/p&gt; &lt;p&gt;This model has worked very well for all these years and it will continue to work. But it &lt;strong&gt;misses an important feature&lt;/strong&gt; that we want to cover with Kamelets: the &lt;strong&gt;ability to abstract&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;In Camel, if I want to publish a tweet in response to a Knative event, I’d do something like this:&lt;/p&gt; &lt;div class="language-groovy highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'knative:event/public.post'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'twitter-timeline://user'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Every time some application sends an event of type “public.post” to the Knative broker, that event is published in my Twitter timeline.&lt;/p&gt; &lt;p&gt;As a user, I don’t care about what the “twitter-timeline” component is doing under the covers: it may contact a single API, or more than one, or it may establish several connections to various systems using strange protocols. I’m only interested in the result.&lt;/p&gt; &lt;p&gt;Now, being an enterprise user, I would like to do a similar thing with my own systems and create a new component to add an item to the inventory of my e-commerce application. I decide to create a new component named &lt;strong&gt;“company-inventory”&lt;/strong&gt; that provides an &lt;strong&gt;“add”&lt;/strong&gt; endpoint to implement such feature. So:&lt;/p&gt; &lt;div class="language-groovy highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'knative:event/new.item'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'company-inventory://add'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// easy, but now try to implement it&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Now it’s time to implement the “company-inventory” component. When adding an item to the inventory, &lt;em&gt;we need to call an HTTP API to get the ID of the actual item type, call another API if the ID is not already present, in order to create a new one, then a third API to add the item, then add another event to a third-party Kafka topic to synchronize downstream services&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Easy?&lt;/strong&gt; Of course, with Apache Camel. But guess what? &lt;strong&gt;You can’t use Apache Camel when writing a new component&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;True. Developers who contribute code to Apache Camel usually adapt existing libraries to the Camel APIs, but they can’t leverage existing components. There’s been an attempt in Camel 2.x to bring such possibility with the &lt;a href="https://camel.apache.org/components/2.x/routebox-component.html"&gt;Routebox component&lt;/a&gt;, but it was not intuitive in some parts and missed a good delivery model, so it wasn’t widely used and it was finally removed in 3.x in favor of this new idea of Kamelets.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Kamelets come to the rescue&lt;/strong&gt;. With Kamelets you can encapsulate the logic to connect to a specific system into &lt;a href="https://camel.apache.org/manual/latest/route-template.html"&gt;&lt;strong&gt;route templates&lt;/strong&gt; (new feature of Camel 3.5.0)&lt;/a&gt;. And guess what? &lt;strong&gt;Kamelets are made of pure Camel DSL&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;Kamelets are Kubernetes resources. We’ll see shortly how to write them. As any Kubernetes resource, you can write a Kamelet into a file and install it on a cluster using Kubectl:&lt;/p&gt; &lt;p&gt;&lt;em&gt;company-inventory-add.kamelet.yaml&lt;/em&gt;&lt;/p&gt; &lt;div class="language-yaml highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt; &lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;camel.apache.org/v1alpha1&lt;/span&gt; &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Kamelet&lt;/span&gt; &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;company-inventory-add&lt;/span&gt; &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# ...&lt;/span&gt; &lt;span class="c1"&gt;# The Kamelet will declare all accepted parameters&lt;/span&gt; &lt;span class="c1"&gt;# in JSON-schema format.&lt;/span&gt; &lt;span class="c1"&gt;# &lt;/span&gt; &lt;span class="c1"&gt;# Skipping the details here.&lt;/span&gt; &lt;span class="c1"&gt;# ...&lt;/span&gt; &lt;span class="na"&gt;flow&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Here's the route&lt;/span&gt; &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;kamelet:source"&lt;/span&gt; &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;http://first-endpoint"&lt;/span&gt; &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;https://second-endpoint/{{itemType}}"&lt;/span&gt; &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;choice&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# ...&lt;/span&gt; &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;kafka:downstream"&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;I’m not going into the details of how to write a Kamelet, that is &lt;a href="https://camel.apache.org/camel-k/latest/kamelets/kamelets.html"&gt;covered in the Camel K user guide about Kamelets&lt;/a&gt;. We need just to know that:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A Kamelet exposes a well defined JSON-schema interface, that documents its purpose and defines the accepted parameters.&lt;/li&gt; &lt;li&gt;A Kamelet can be a source of data or a sink (consumer or producer, in the Camel jargon). The “company-inventory-add” Kamelet is a sink.&lt;/li&gt; &lt;li&gt;A Kamelet defines what Camel code should be executed when the Kamelet is used inside an integration: the code is expressed as route template that can use properties (e.g. “{{itemType}}”)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can install the Kamelet on a namespace by simply executing:&lt;/p&gt; &lt;div class="language-shell highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;kubetctl apply &lt;span class="nt"&gt;-f&lt;/span&gt; company-inventory-add.kamelet.yaml &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Once done so, the Kamelet becomes available in all integrations that are deployed in the same Kubernetes namespace. So you can write a route like this to use the Kamelet:&lt;/p&gt; &lt;p&gt;&lt;em&gt;example.groovy&lt;/em&gt;&lt;/p&gt; &lt;div class="language-groovy highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'knative:event/new.item'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'kamelet://company-inventory-add?itemType=grocery'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// implementing this is much simpler&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;And run it with:&lt;/p&gt; &lt;div class="language-shell highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;kamel run example.groovy &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The logic about what it means to add an inventory item is encapsulated in the Kamelet (multiple HTTP calls, enterprise integration patterns and sync with Kafka), that can be shared among all other integrations. And it’s all &lt;strong&gt;Camel DSL&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;This is only a simple example of what a Kamelet can do, there are many more interesting use cases out there.&lt;/p&gt; &lt;h2 id="what-about-knative-sources"&gt;What about Knative sources?&lt;/h2&gt; &lt;p&gt;The first time we thought about Kamelets was in the context of &lt;a href="https://knative.dev/docs/eventing/sources/"&gt;Knative Eventing sources&lt;/a&gt;. It was the end of 2018, believe it or not. We thought that they could really make the difference in that space, but we were not ready for the leap.&lt;/p&gt; &lt;p&gt;We are currently providing &lt;a href="https://knative.dev/docs/eventing/samples/apache-camel-source/"&gt;CamelSources&lt;/a&gt; in Knative, and they are really cool because they &lt;em&gt;allow users to write a small piece of Camel DSL&lt;/em&gt; to produce any kind of event, taking data from any system that Camel supports.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;So, what’s wrong with CamelSources?&lt;/strong&gt; They are really cool from my point of view. But the problem is that Knative users are usually &lt;strong&gt;not&lt;/strong&gt; Camel users. As a Camel user, I can write a piece of Camel DSL in a few minutes and make it work. But people with a background in Go or Python… they don’t even know what Camel actually is.&lt;/p&gt; &lt;p&gt;But that’s where a Kamelet can help.&lt;/p&gt; &lt;p&gt;Camel developers and passionate contributors will write the Camel DSL, creating “connectors” for external sources using the language of Kamelets. In future versions of Camel K, we’ll create a &lt;strong&gt;catalog of curated Kamelets&lt;/strong&gt; that will be installed together with Camel K. Those Kamelets will be available to anyone who installs Camel K on a Kubernetes cluster.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/kamelets-binding.png" alt="kamelet-binding" class="align-center" /&gt;&lt;/p&gt; &lt;p&gt;Without any knowledge of Apache Camel, people can list the catalog of the available Kamelets with standard Kubernetes tools:&lt;/p&gt; &lt;div class="language-shell highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get kamelets NAME inventory-source twitter-source slack-source telegram-source ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Kamelets declare the list of expected parameters using a JSON-schema format, so it will be easy to check them and provide values.&lt;/p&gt; &lt;p&gt;Users can then decide to use a Kamelet e.g. to push some twitter data into the Knative broker. To do so, they can create a &lt;strong&gt;KameletBinding&lt;/strong&gt;.&lt;/p&gt; &lt;div class="language-yaml highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;camel.apache.org/v1alpha1&lt;/span&gt; &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;KameletBinding&lt;/span&gt; &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;twitter-source-to-knative&lt;/span&gt; &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;camel.apache.org/v1alpha1&lt;/span&gt; &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Kamelet&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;twitter-source&lt;/span&gt; &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;keywords&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Apache Camel&lt;/span&gt; &lt;span class="na"&gt;sink&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;eventing.knative.dev/v1&lt;/span&gt; &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Broker&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;As you see, the final user will not need to know anything about Camel, only use the source.&lt;/p&gt; &lt;p&gt;Of course, the &lt;strong&gt;KameletBinding&lt;/strong&gt; resource is a wrapper for an Integration. I.e. under the hood the operator will create the Camel DSL corresponding to the binding, which is something like:&lt;/p&gt; &lt;div class="language-groovy highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;demonstration&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;don&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;groovy&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;;)&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'kamelet:twitter-source?keywords=Apache+Camel'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'knative:event'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;This makes Kamelets available to different kind of users: Camel users and Knative users, with a different interface.&lt;/p&gt; &lt;h2 id="so-is-it-only-about-knative"&gt;So, is it only about Knative?&lt;/h2&gt; &lt;p&gt;Of course not: Kamelets are general purpose connectors, not directly linked to Knative.&lt;/p&gt; &lt;p&gt;If I want to send data from my Twitter Kamelet to a Kafka topic, I just need to create the following code and run it:&lt;/p&gt; &lt;div class="language-groovy highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'kamelet:twitter-source?keywords=Apache+Camel'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'kafka:topic'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;All Kamelets can be used to feed Kafka instead of Knative with the same exact approach. In fact, we’ve also extended the &lt;strong&gt;KameletBinding&lt;/strong&gt; mechanism to Kafka via &lt;a href="https://camel.apache.org/camel-k/latest/kamelets/kamelets.html#_binding_to_a_kafka_topic"&gt;Strimzi&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="what-makes-kamelets-great"&gt;What makes Kamelets great?&lt;/h2&gt; &lt;p&gt;The main difference between a Kamelet and a Camel component is its purpose. While a component can serve several purposes by specifying different combinations of the parameters, &lt;strong&gt;Kamelets are driven by use cases&lt;/strong&gt;. A Kamelet can let you perform a specific action on a system or gather data from another system, with a limited degree of flexibility.&lt;/p&gt; &lt;p&gt;Reducing the scope helps designing CLI or &lt;strong&gt;UI tools&lt;/strong&gt; around them.&lt;/p&gt; &lt;p&gt;A Kamelet contains (see the &lt;a href="https://camel.apache.org/camel-k/latest/kamelets/kamelets.html#kamelets-specification"&gt;Kamelet specification&lt;/a&gt; for more details):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Title and description of the purpose of the Kamelet and how to use it&lt;/li&gt; &lt;li&gt;A nice icon&lt;/li&gt; &lt;li&gt;The set of expected parameters in JSON-schema format&lt;/li&gt; &lt;li&gt;The schema of the output they produce (or the input they require)&lt;/li&gt; &lt;li&gt;Implementation (Camel DSL)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Writing a UI that allows browsing the available Kamelets, configure them and bind them to a destination should be pretty easy.&lt;/p&gt; &lt;p&gt;There are many possible use cases:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A specialized UI, e.g. in the OpenShift dev console, can let the user browse the available Kamelets and configure them via a graphical form to send data to a particular Knative destination&lt;/li&gt; &lt;li&gt;A second specialized UI about Kafka can include a section where the users can instantiate the Kamelets to bring data to a particular topic&lt;/li&gt; &lt;li&gt;Another platform, e.g. like &lt;a href="https://syndesis.io/"&gt;Syndesis&lt;/a&gt; can use the Kamelets to provide additional connectors for creating end-to-end integrations&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The great thing about Kamelets is that they are not bound to a spcific technology: they are reusable connectors.&lt;/p&gt; &lt;h2 id="try-them-out"&gt;Try them out!&lt;/h2&gt; &lt;p&gt;Camel K 1.2.0 has already been released, so, why don’t you try this new feature?&lt;/p&gt; &lt;p&gt;Feedback is welcome, as well as any kind of contribution!&lt;/p&gt; &lt;p&gt;Meet us on &lt;a href="https://camel.zulipchat.com/"&gt;Zulip&lt;/a&gt;!&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/nSEo7f9PbZY" height="1" width="1" alt=""/&gt;</content><summary>Kamelets are the most important feature released with Apache Camel K 1.2.0. Apart from their cool name, Kamelets represent a significant change in the whole Camel ecosystem, because they introduce new ways of using Apache Camel in the cloud and a novel approach for contributing new connectors. What is a Kamelet? A Kamelet is a “Kamel Route Snippet”. Before going into the details of what this actua...</summary><dc:creator>Nicola Ferraro</dc:creator><dc:date>2020-10-11T22:00:00Z</dc:date><feedburner:origLink>https://www.nicolaferraro.me/2020/10/12/kamelets/</feedburner:origLink></entry><entry><title>Apache Camel 3.6 - More camel-core optimizations coming (Part 4)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fkJ7cCYUY6M/apache-camel-36-more-camel-core.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="roadmap" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-apache_camel_3_6_more_camel_core_optimizations_coming_part_4</id><updated>2020-10-09T09:32:31Z</updated><published>2020-10-09T09:32:00Z</published><content type="html">&lt;p&gt;I have previously blogged about the optimziations we are doing in the Apache Camel core. The first 3 blogs (&lt;a href="http://www.davsclaus.com/2020/01/apache-camel-31-more-camel-core.html" target="_blank"&gt;part1&lt;/a&gt;, &lt;a href="http://www.davsclaus.com/2020/01/apache-camel-31-more-camel-core_30.html" target="_blank"&gt;part2&lt;/a&gt;, &lt;a href="http://www.davsclaus.com/2020/02/apache-camel-31-more-camel-core.html" target="_blank"&gt;part3&lt;/a&gt;) were a while back leading up to the 3.4 LTS release.&lt;/p&gt;&lt;p&gt;Now we have done some more work that is coming in Camel 3.6 leading up to the next 3.7 LTS release.&lt;/p&gt;&lt;p&gt;To speedup startup we switched to a new uuid generator. The old (classic) generator was inherited from Apache ActiveMQ which needed to ensure its ids were unique in a network of brokers, and therefore to ensure this the generator was using the hostname as prefix in the id. This required on startup to do a network access to obtain this information which costs a little time. Also depending on networks this can be more restrictive and delay the startup. The new generator is a pure in-memory fast generator that was used by Camel K and Camel Quarkus.&lt;/p&gt;&lt;p&gt;We also identified a few other spots during route initialization. For example one small change was to avoid doing some regular expression masking on route endpoints which wasn't necessary anymore.&lt;/p&gt;&lt;p&gt;Now the bigger improvements are in the following areas&lt;/p&gt;&lt;p&gt;&lt;b&gt;Avoid throwing exceptions&lt;/b&gt;&lt;/p&gt;&lt;p&gt;We identified on spring runtimes that Camel would query the spring bean registry for known beans by id, which the Spring framework would throw a NoSuchBeanDefinitionException if the bean is not present. As Camel does a bit of optional bean discovery during bootstrap, we found a way to avoid this which prevents this.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Singleton languages&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Another related problem is that in Camel 3 due to the modularization then some of the languages (bean, simple, and others) have been changed from being a singleton to prototype scoped. This is in fact one of the biggest problems and we had a Camel user report a problem with thread contention in a high concurrent use-case would race for resolving languages (they are prototype scoped). So you would have this problem, and because the language resolver would query the registry first then Spring would throw that no such bean exception, and then Camel would resolve the language via its own classpath resolver. So all together this cost performance. We can see this in the screenshots from the profiler in the following.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-Z1cfZX4UPfI/X4AnjnSnc5I/AAAAAAAACTU/XqQSfdCpd2wvI_0KXgyY7w6IovlRBbTGgCLcBGAsYHQ/s2482/350-blocked.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1068" data-original-width="2482" src="https://1.bp.blogspot.com/-Z1cfZX4UPfI/X4AnjnSnc5I/AAAAAAAACTU/XqQSfdCpd2wvI_0KXgyY7w6IovlRBbTGgCLcBGAsYHQ/s320/350-blocked.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-6g2ysd-nAAE/X4Anjqjjn7I/AAAAAAAACTY/CHXzTVx2uqkAtaJ1D5ESolGci-PHnRN8ACLcBGAsYHQ/s2388/360-blocked.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="840" data-original-width="2388" src="https://1.bp.blogspot.com/-6g2ysd-nAAE/X4Anjqjjn7I/AAAAAAAACTY/CHXzTVx2uqkAtaJ1D5ESolGci-PHnRN8ACLcBGAsYHQ/s320/360-blocked.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;p&gt;The top screenshot is using Camel 3.5 and the bottom 3.6. In the top we can see the threads are blocked in Camels resolveLanguage method. And in 3.6 then its actually the log4j logger that is blocking for writing to the log file. Both applications are using the same Camel application and have been running for about 8 minutes.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Reduce object allocations&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The next screenshots are showing a sample of the object allocations.&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-qgdNqOhKbyo/X4AoUiYZ-_I/AAAAAAAACTg/0QaLtbYwtSor8Xv6s2Q18yIxa6GfabqCgCLcBGAsYHQ/s2046/350-allocations.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="544" data-original-width="2046" src="https://1.bp.blogspot.com/-qgdNqOhKbyo/X4AoUiYZ-_I/AAAAAAAACTg/0QaLtbYwtSor8Xv6s2Q18yIxa6GfabqCgCLcBGAsYHQ/s320/350-allocations.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-bFRCi1trEBE/X4AoUgq3H6I/AAAAAAAACTk/plymeUJZZ8Y7DW91zBobjtW-GW0qQbKvQCLcBGAsYHQ/s1846/360-allocations.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="534" data-original-width="1846" src="https://1.bp.blogspot.com/-bFRCi1trEBE/X4AoUgq3H6I/AAAAAAAACTk/plymeUJZZ8Y7DW91zBobjtW-GW0qQbKvQCLcBGAsYHQ/s320/360-allocations.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;p&gt;With Camel 3.5 we are average about 1000 obj/sec and with 3.6 we are down to about a 1/3th.&lt;/p&gt;&lt;p&gt;One of the improvements to help reduce the object allocations was how parameters to languages was changed from using a Map to a plain object array. The Map takes up more memory and object allocations than a single fixed object array.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Do as much init as possible&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Another performance improvement that aids during runtime was that we moved as much we could from the evaluation to the initialization phase in the Camel languages (simple, bean, etc.). We did this by introducing the init phase and ensuring CamelContext was carried around in the interns so we can use the context during the init phase, where its really needed. This ensures the runtime evaluation is as fast as possible.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Other smaller optimizations&lt;/b&gt;&lt;/p&gt;&lt;p&gt;We also improved the simple language to be a bit smarter in its binary operators (such as header.foo &amp;gt; 100). Now the simple language has stronger types for numeric and boolean types during its parsing, which allows us to know better from the right and left hand side of the binary operator to do type coercion so the types are comparable by the JVM. Before we may end up with falling back to converting to string types on both sides. And there is more to come, I have some ideas how to work on a compiled simple language.&lt;/p&gt;&lt;p&gt;The screenshots below shows a chart with the CPU, object allocations and thrown exceptions.&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-bkWON32w2NE/X4ArD16CGII/AAAAAAAACT4/HGhG-t_A6HoUPTNCx_LxvhXf_6X8cH2FQCLcBGAsYHQ/s2048/350-performance.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1047" data-original-width="2048" src="https://1.bp.blogspot.com/-bkWON32w2NE/X4ArD16CGII/AAAAAAAACT4/HGhG-t_A6HoUPTNCx_LxvhXf_6X8cH2FQCLcBGAsYHQ/s320/350-performance.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-PGPnX2alJNw/X4ArD3d7l3I/AAAAAAAACT0/Q8g-4MMhCG8yr6dPwvmMHcsw7If04E6gACLcBGAsYHQ/s2232/360-performance.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="936" data-original-width="2232" src="https://1.bp.blogspot.com/-PGPnX2alJNw/X4ArD3d7l3I/AAAAAAAACT0/Q8g-4MMhCG8yr6dPwvmMHcsw7If04E6gACLcBGAsYHQ/s320/360-performance.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;p&gt;As we can see this summarise what was mentioned was done to optimize. The number of exceptions has been reduced to 0 at runtime. There is about 3500 thrown during bootstrap (that is Java JAXB which is used for loading the spring XML file with the Camel routes used for the sample application). We do have a &lt;a href="http://www.davsclaus.com/2020/03/apache-camel-31-fast-loading-of-xml.html" target="_blank"&gt;fast XML loader&lt;/a&gt; in Camel that is not using JAXB.&lt;/p&gt;&lt;p&gt;Another improvement we did was to build a source code generator for a new UriFactory which allows each component to quickly build dynamic endpoint URIs from a Map of parameters. The previous solution was to use RuntimeCamelCatalog that was more generic and required loading component metadata from json descriptor files. A few components use this to optimize the toD (such as http components). By this change we avoid the runtime catalog as dependency (reduce JAR size) and the source code generated uri factory is much faster (its speedy plain Java). However the sample application used for this blog did not use toD nor the UriFactory.&lt;/p&gt;&lt;p&gt;Apache Camel 3.6 is scheduled for release later this month of October. It's going to be the fastest Camel ever ;)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=s7G7E1djXZM:clqBe53SGjc:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=s7G7E1djXZM:clqBe53SGjc:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=s7G7E1djXZM:clqBe53SGjc:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=s7G7E1djXZM:clqBe53SGjc:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=s7G7E1djXZM:clqBe53SGjc:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=s7G7E1djXZM:clqBe53SGjc:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=s7G7E1djXZM:clqBe53SGjc:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/s7G7E1djXZM" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fkJ7cCYUY6M" height="1" width="1" alt=""/&gt;</content><summary>I have previously blogged about the optimziations we are doing in the Apache Camel core. The first 3 blogs (part1, part2, part3) were a while back leading up to the 3.4 LTS release. Now we have done some more work that is coming in Camel 3.6 leading up to the next 3.7 LTS release. To speedup startup we switched to a new uuid generator. The old (classic) generator was inherited from Apache ActiveMQ...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2020-10-09T09:32:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/s7G7E1djXZM/apache-camel-36-more-camel-core.html</feedburner:origLink></entry><entry><title>Static analysis with KubeAudit for Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Ib3GHDxqQ0w/" /><category term="DevOps" /><category term="Kubernetes" /><category term="Microservices" /><category term="jq json" /><category term="KubeAudit" /><category term="kubernetes manifest" /><category term="openshift" /><category term="static analyzer" /><author><name>Sean Pryor</name></author><id>https://developers.redhat.com/blog/?p=788447</id><updated>2020-10-09T07:00:20Z</updated><published>2020-10-09T07:00:20Z</published><content type="html">&lt;p&gt;In this article, we introduce a new utility for developers who want to ensure that their code transitions cleanly from upstream &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; to &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. &lt;a target="_blank" rel="nofollow" href="https://github.com/AICoE/OpenShiftKubeAudit"&gt;OpenShiftKubeAudit&lt;/a&gt; (KubeAudit) is a static analyzer that semantically checks a user&amp;#8217;s code for known incompatibilities so you can fix them before bringing the code into OpenShift. KubeAudit is also simple to use and easy to extend.&lt;/p&gt; &lt;h2&gt;Running an audit&lt;/h2&gt; &lt;p&gt;This being the first release, KubeAudit currently offers only a handful of audits, but they&amp;#8217;re easy to write. We&amp;#8217;re looking for feedback and additional use cases from the community to help make the tool more comprehensive.&lt;/p&gt; &lt;p&gt;&lt;span id="more-788447"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;To start, find &lt;a target="_blank" rel="nofollow" href="https://github.com/AICoE/OpenShiftKubeAudit"&gt;KubeAudit&lt;/a&gt; on GitHub.&lt;/p&gt; &lt;p&gt;You&amp;#8217;ll want to clone the git repo somewhere on the same machine where the manifests to audit reside, and set up a Python virtual environment:&lt;/p&gt; &lt;pre&gt;$ git clone https://github.com/AICoE/OpenShiftKubeAudit.git $ cd OpenShiftKubeAudit $ python3 -m virtualenv venv $ source venv/bin/activate $ python3 -m pip install -r requirements.txt&lt;/pre&gt; &lt;p&gt;Now, let&amp;#8217;s run the auditing tool:&lt;/p&gt; &lt;pre&gt;$ ./audit.py /path/to/yaml/directory&lt;/pre&gt; &lt;p&gt;It should produce similar output to this:&lt;/p&gt; &lt;pre&gt;$ ./audit.py ./testaudits Audit Results: Issue: Pod Security Policies in manifests Severity: 1 - High Resolution: In OpenShift PodSecurityPolicies are replaced by SecurityContextConstraints. See https://docs.openshift.com/container-platform/4.5/authentication/managing-security-context-constraints.html Affected Files: Matched regex: testaudits/yaml/PodSecurityPolicies.yaml Issue: NetworkPolicy has an IPBlock Severity: 2 - Medium Resolution: The Kubernetes v1 NetworkPolicy features are available in OpenShift Container Platform except for egress policy types and IPBlock. Affected Files: Matched regex: testaudits/yaml/NetworkPolicies.yaml Issue: Egress network policy set Severity: 2 - Medium Resolution: The Kubernetes v1 NetworkPolicy features are available in OpenShift Container Platform except for egress policy types and IPBlock. Affected Files: Matched regex: testaudits/yaml/NetworkPolicies.yaml&lt;/pre&gt; &lt;p&gt;Now with these issues identified, a developer could fix them before they become issues in production. However, since the tool is new, there are many use cases that have not yet been identified, which is why the tool is easy to extend.&lt;/p&gt; &lt;h2&gt;Adding a custom audit&lt;/h2&gt; &lt;p&gt;KubeAudit uses a simple initialization (INI) syntax to define an audit with a few fields:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: A name or title to identify the audit.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Query (optional)&lt;/strong&gt;: This is a &lt;a target="_blank" rel="nofollow" href="https://stedolan.github.io/jq/"&gt;jq-syntax query&lt;/a&gt;, which the auditing tool uses for semantic analysis of parts of a manifest. Note that the &lt;code&gt;query&lt;/code&gt; is optional if you are using &lt;code&gt;regex&lt;/code&gt;. This type of query is useful when you need a more comprehensive analysis.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Regex (optional)&lt;/strong&gt;: You can specify a &lt;code&gt;regex&lt;/code&gt; to search for in each file. Although &lt;code&gt;regex&lt;/code&gt; is a simpler check than &lt;code&gt;query&lt;/code&gt;, the utility can ignore &lt;code&gt;regex&lt;/code&gt;es found in the code comments.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Regexes section (optional)&lt;/strong&gt;: Use this section when you need multiple &lt;code&gt;regex&lt;/code&gt;es. Once again, the utility ignores &lt;code&gt;regex&lt;/code&gt; matches found in comments, and it matches the results in the order that they appear. If all of the &lt;code&gt;regex&lt;/code&gt;es are found in the corresponding order, it is considered a match.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Severity&lt;/strong&gt;: This message indicates the relative severity of the issue. It needs to start with a number, and can then be followed by a text description of the severity.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Message&lt;/strong&gt;: The diagnostic message to output to the user.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Below is an example audit:&lt;/p&gt; &lt;pre&gt;[Default] # The name/title of the issue, e.g., "Pod Security Policies in manifests" name = RunAsUser is set outside range, has some known issues # A jq-syntax query to be applied to the yaml files. The query must return # either True or False, but can be otherwise any valid jq string query = ((.. | .runAsUser? | numbers) != 0) and ((.. | .runAsUser? | numbers) &amp;#60; 10000000 or (.. | .runAsUser? | numbers) &amp;#62; 20000000) # Python-compatible regex to search for. The script automatically ignores # commented lines regex = runAsUser: # Severity to help the user prioritize fixes severity = 4 - Warning # Message to output to the user, usually a resolution or more information message = Setting runAsUser ID explicitly is not recommended. Additionally setting runAsUser explicitly outside of the expected range in OpenShift (10000000 - 20000000) has known incompatibilities # This section can be used to construct a multiline regex for the files. # Each regex is searched for in the order that it appears and automatically # ignores comments. Any number of regexes can be added this way [regexes] regex1 = regex2 = &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This auditing tool currently only supports Kubernetes manifests, but we plan to expand it to include &lt;a href="https://developers.redhat.com/blog/2020/07/20/advanced-helm-support-in-the-openshift-4-5-web-console/"&gt;Helm charts&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/category/go/"&gt;Go code&lt;/a&gt;, as well. The tool is in very early stages, but is looking for community input to help add use cases.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#038;title=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/10/09/static-analysis-with-kubeaudit-for-red-hat-openshift/" data-a2a-title="Static analysis with KubeAudit for Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/09/static-analysis-with-kubeaudit-for-red-hat-openshift/"&gt;Static analysis with KubeAudit for Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Ib3GHDxqQ0w" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In this article, we introduce a new utility for developers who want to ensure that their code transitions cleanly from upstream Kubernetes to Red Hat OpenShift. OpenShiftKubeAudit (KubeAudit) is a static analyzer that semantically checks a user&amp;#8217;s code for known incompatibilities so you can fix them before bringing the code into OpenShift. KubeAudit is also [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/09/static-analysis-with-kubeaudit-for-red-hat-openshift/"&gt;Static analysis with KubeAudit for Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/09/static-analysis-with-kubeaudit-for-red-hat-openshift/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">788447</post-id><dc:creator>Sean Pryor</dc:creator><dc:date>2020-10-09T07:00:20Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/09/static-analysis-with-kubeaudit-for-red-hat-openshift/</feedburner:origLink></entry><entry><title>Migrating C and C++ applications from Red Hat Enterprise Linux version 7 to version 8</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/QFKrisKVNwo/" /><category term="C" /><category term="C++" /><category term="Linux" /><category term="Programming Languages" /><category term="application migration" /><category term="binary interface" /><category term="rhel 7" /><category term="rhel 8" /><category term="share libraries" /><author><name>Thomas Rodgers</name></author><id>https://developers.redhat.com/blog/?p=782477</id><updated>2020-10-08T07:00:22Z</updated><published>2020-10-08T07:00:22Z</published><content type="html">&lt;p&gt;When moving an application that you&amp;#8217;ve compiled on &lt;a href="https://developers.redhat.com/topics/linux"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL) 7 to RHEL 8, you will likely encounter issues due to changes in the application binary interface (ABI). The ABI describes the low-level binary interface between an application and its operating environment. This interface requires tools such as compilers and linkers, as well as the produced runtime libraries and the operating system itself, to agree upon the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The application&amp;#8217;s data type, size, and alignment.&lt;/li&gt; &lt;li&gt;The calling conventions, which define how function arguments are passed and how return values are retrieved.&lt;/li&gt; &lt;li&gt;The function and symbol names and their versions.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;As the toolchain and operating environment evolve with successive versions of Red Hat Enterprise Linux, the details of the ABI will change. Red Hat makes certain guarantees regarding application compatibility between releases. Those guarantees are outlined in the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/rhel-abi-compatibility"&gt;RHEL 7 Application Compatibility Guide&lt;/a&gt; (ACG) and the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/rhel8-abi-compatibility"&gt;RHEL 8 Application Compatibility Guide&lt;/a&gt;. This article is a companion to the ACG guides.&lt;/p&gt; &lt;h2&gt;Migrating compatible C and C++ applications&lt;/h2&gt; &lt;p&gt;The most straightforward way to avoid compatibility problems when migrating your &lt;a href="https://developers.redhat.com/topics/c"&gt;C and C++&lt;/a&gt; application code from RHEL 7 to RHEL 8 is to rebuild the code on RHEL 8. Users can leverage a containerized or virtualized environment to build and test in a RHEL 8 environment on a RHEL 7 system before migrating to the newer version.&lt;/p&gt; &lt;p&gt;In some cases, it might be possible to deploy C and C++ applications built on RHEL 7 to RHEL 8 without first rebuilding. If you&amp;#8217;ve followed the guidance in the RHEL 7 ACG, and depend only on the C and C++ libraries in &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/rhel-abi-compatibility#Appendix"&gt;compatibility level 1 (CL1)&lt;/a&gt;, then Red Hat provides a compatible version of those libraries in RHEL 8. Indeed, we maintain stable versions of those libraries for three major RHEL releases. Note, however, that there are no guarantees that RHEL 8 will provide RHEL 7-compatible libraries beyond CL1.&lt;/p&gt; &lt;h2&gt;Migrating shared libraries&lt;/h2&gt; &lt;p&gt;Unless a C application loads shared libraries via &lt;code&gt;dlopen()&lt;/code&gt;, the &lt;code&gt;ldd&lt;/code&gt; command shows what libraries a given application depends on (in the case of &lt;code&gt;dlopen()&lt;/code&gt;, you can use &lt;code&gt;LD_DEBUG=all my_application&lt;/code&gt; or the &lt;code&gt;strace&lt;/code&gt; command to observe which libraries are being loaded). However, shared libraries for C++ applications are more complicated and restricted.&lt;/p&gt; &lt;h3&gt;C++ ABI incompatibility between RHEL 7 and RHEL 8&lt;/h3&gt; &lt;p&gt;C++ libraries from RHEL 7 are likely to be incompatible with the corresponding libraries from RHEL 8. The reason is that the system compiler for RHEL 8 uses a new ABI for C++ code, which is different from the ABI used by the RHEL 7 system compiler. The RHEL 7 version of the C++ libraries uses the old ABI, whereas the RHEL 8 version uses the new one. Applications linked to an RHEL 7 version of a C++ library cannot use the RHEL 8 version of that library. The only C++ libraries that are in ACG CL1 are the C++ standard library (&lt;code&gt;libstdc++&lt;/code&gt;) and Thread Building Blocks libraries (&lt;code&gt;libtbb&lt;/code&gt; and &lt;code&gt;libtbbmalloc&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Changes in the C++ ABI between RHEL 7 and RHEL 8 are due to introducing new versions of &lt;code&gt;std::string&lt;/code&gt; and &lt;code&gt;std::list&lt;/code&gt; in the C++ standard library. For details about the changes to the &lt;code&gt;std::string&lt;/code&gt; ABI, see Jason Merril&amp;#8217;s article, &lt;a href="https://developers.redhat.com/blog/2015/02/05/gcc5-and-the-c11-abi/"&gt;GCC5 and the C++11 ABI&lt;/a&gt;. The changes to the C++ ABI apply to all language modes, so it doesn&amp;#8217;t matter whether you are compiling for &lt;code&gt;-std=c++11&lt;/code&gt; or any other &lt;code&gt;-std&lt;/code&gt; option.&lt;/p&gt; &lt;h3&gt;Workarounds that do not work&lt;/h3&gt; &lt;p&gt;If your application code depends on libraries not in ACG CL1, it might be tempting to simply copy those other binary dependencies over; however, this is neither supported nor likely to work. It might also be tempting to statically link all dependencies on RHEL 7 and deploy to RHEL 8. Statically linking &lt;code&gt;glibc&lt;/code&gt; prevents some features from functioning, so this option is also unsupported and not recommended by Red Hat. It is possible to statically link to &lt;code&gt;libstdc++&lt;/code&gt;, but doing that shouldn&amp;#8217;t be necessary. The &lt;code&gt;libstdc++.so.6&lt;/code&gt; that shipped with RHEL 8 is backward compatible. Statically linking to other C++ libraries could be a solution if the versions of those libraries on RHEL 8 are incompatible with the RHEL 7 versions.&lt;/p&gt; &lt;h3&gt;Build guidance&lt;/h3&gt; &lt;p&gt;Finally, the ACG provides a recommended approach to building applications on RHEL 7 that will run on RHEL 8. This essentially means building your application against your own version(s) of library dependencies outside of those specifically listed in ACG CL1, rather than those provided by the base system. See the ACG for guidance on providing compatibility libraries for applications that have been built with libraries that are outside of the desired compatibility level.&lt;/p&gt; &lt;h2&gt;Frequently asked questions (F.A.Q.)&lt;/h2&gt; &lt;p&gt;Before closing, I&amp;#8217;ll answer the most pertinent questions that we&amp;#8217;ve received since releasing RHEL 8.&lt;/p&gt; &lt;h3&gt;Q: What does Red Hat recommend if I want to deploy an application on RHEL 8? Where should I build my application?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: The most straightforward way to avoid compatibility problems is to build your application on RHEL 8.&lt;/p&gt; &lt;h3&gt;Q: Can I build my application on RHEL 7 and deploy it on RHEL 8?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Yes, if you follow the guidance in the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/rhel-abi-compatibility"&gt;Application Compatibility Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Whether a given application built on RHEL 7 can be deployed on RHEL 8 depends on the system libraries the application is linked with. For libraries within the RHEL 7 ACG&amp;#8217;s CL1, a compatible version of the library is provided in RHEL 8. For all other libraries, there is no guarantee that RHEL 8 provides a compatible version.&lt;/p&gt; &lt;p&gt;For C++ libraries, this advice is not hypothetical, as C++ libraries from RHEL 7 are likely to be incompatible with the corresponding libraries from RHEL 8. To build applications on RHEL 7 that will run on RHEL 8, the ACG suggests the following:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Provide compatibility libraries for applications that have been built with libraries that are not at the desired compatibility level.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;In other words, build your application against your own version of the libraries, rather than the RHEL 7 versions. That way, your application depends on a library that you control, not one that belongs to RHEL, and will be incompatible between major releases.&lt;/p&gt; &lt;h3&gt;Q: Why are C++ libraries built with the system compiler on RHEL 7 not compatible with RHEL 8?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: The system compiler on RHEL 8 uses a new ABI for C++ code, which is different from the ABI used by the RHEL 7 system compiler. The RHEL 7 versions of C++ libraries use the old ABI, and the RHEL 8 versions use the new one. Applications linked to the RHEL 7 version of a C++ library will not be able to use the RHEL 8 version of that library.&lt;/p&gt; &lt;h3&gt;Q: What has changed in the C++ compiler and libraries to cause ABI incompatibilities between RHEL 7 and 8?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Starting with RHEL 8, new versions of the &lt;code&gt;std::string&lt;/code&gt; and &lt;code&gt;std::list&lt;/code&gt; types are defined in the C++ standard library. As a result, C++ binaries (applications and libraries) built on RHEL 7 could fail to link with C++ binaries built on RHEL 8—or they might link successfully but fail at runtime.&lt;/p&gt; &lt;h3&gt;Q: If I want to build a C++ application on RHEL 8, do I need to compile with &lt;code&gt;-std=c++11&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: No. The changes to the C++ ABI apply to all language modes, whether you compile with &lt;code&gt;-std=c++11&lt;/code&gt; or &lt;code&gt;-std=c++98&lt;/code&gt; or any other &lt;code&gt;-std&lt;/code&gt; option.&lt;/p&gt; &lt;h3&gt;Q: Can I fix library ABI compatibility problems by copying shared libraries from RHEL 7 over to RHEL 8?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Copying a RHEL 7 library to RHEL 8 might work, but Red Hat does not support it. There are downsides of copying RHEL 7 libraries to RHEL 8, such as the library not being automatically updated by &lt;code&gt;yum&lt;/code&gt;/&lt;code&gt;dnf&lt;/code&gt; when Red Hat issues an erratum for the package to fix bugs or security flaws.&lt;/p&gt; &lt;h3&gt;Q: I built my application on RHEL 6, and it ran fine on RHEL 7. Will my application work on RHEL 8 as well?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: It depends. If the application only uses libraries from CL1 in the RHEL 6 ACG, then it should work on RHEL 8 because those libraries are stable for three major releases (RHEL versions 6, 7, and 8). If the application uses RHEL 6 libraries that are outside of CL1, but which still happen to work on RHEL 7, it might also run on RHEL 8, but it might not. There was never a guarantee that such an application would run on RHEL 7.&lt;/p&gt; &lt;h3&gt;Q: Which packages are guaranteed to be ABI compatible across major RHEL releases?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: See the Application Compatibility Guides for each version of RHEL. Libraries in compatibility level 1 are guaranteed to be compatible. On RHEL 7, the only C++ libraries in CL1 are &lt;code&gt;libstdc++&lt;/code&gt; and the Thread Building Blocks (TBB) libs.&lt;/p&gt; &lt;h3&gt;Q: Are there libraries that support both the old and new C++ ABIs?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Yes, &lt;code&gt;libstdc++&lt;/code&gt; does. The TBB libraries are not affected by the ABI change, so they are also compatible with both ABIs.&lt;/p&gt; &lt;h3&gt;Q: How can I find out which libraries my application depends on?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: The &lt;code&gt;ldd&lt;/code&gt; command displays all the shared libraries that a binary depends on (including indirect dependencies from other libraries).&lt;/p&gt; &lt;h3&gt;Q: Can I build an application for RHEL 8 (with the RHEL 8 system compiler) on RHEL 7?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: While theoretically possible, doing so would be awkward and error-prone. If developing on RHEL 7 is a requirement for applications to be deployed on RHEL 8, Red Hat recommends running RHEL 8 in a container or virtual machine.&lt;/p&gt; &lt;h3&gt;Q: If I link statically to glibc/libstdc++ on RHEL 7, will the resulting binary work fine on RHEL 8?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Red Hat does not support statically linking applications. Statically linking &lt;code&gt;glibc&lt;/code&gt; prevents some features from functioning and is not recommended. Statically linking &lt;code&gt;libstdc++&lt;/code&gt; is possible, but it should not be necessary because the &lt;code&gt;libstdc++.so.6&lt;/code&gt; library on RHEL 8 is backward compatible. Statically linking to other C++ libraries could be a solution if the versions of those libraries on RHEL 8 are incompatible with the RHEL 7 versions.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#038;title=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" data-a2a-url="https://developers.redhat.com/blog/2020/10/08/migrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8/" data-a2a-title="Migrating C and C++ applications from Red Hat Enterprise Linux version 7 to version 8"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/08/migrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8/"&gt;Migrating C and C++ applications from Red Hat Enterprise Linux version 7 to version 8&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/QFKrisKVNwo" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;When moving an application that you&amp;#8217;ve compiled on Red Hat Enterprise Linux (RHEL) 7 to RHEL 8, you will likely encounter issues due to changes in the application binary interface (ABI). The ABI describes the low-level binary interface between an application and its operating environment. This interface requires tools such as compilers and linkers, as [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/08/migrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8/"&gt;Migrating C and C++ applications from Red Hat Enterprise Linux version 7 to version 8&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/08/migrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">782477</post-id><dc:creator>Thomas Rodgers</dc:creator><dc:date>2020-10-08T07:00:22Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/08/migrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8/</feedburner:origLink></entry><entry><title>Payments Architecture - Fraud Detection Example</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/uDN6qP6Q_II/payments-architecture-fraud-detection-example.html" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="JBossAMQ" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-payments_architecture_fraud_detection_example</id><updated>2020-10-08T09:07:50Z</updated><published>2020-10-08T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-NhImz2b--gU/X1jsrXrG_jI/AAAAAAAAxeI/2I4wj4AD4YUcuxWk1-464UVs5OiejZFwQCNcBGAsYHQ/s1600/christiann-koepke-0jPuWm8_9wY-unsplash.jpg" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="fraud detection" border="0" data-original-height="1067" data-original-width="1600" height="213" src="https://1.bp.blogspot.com/-NhImz2b--gU/X1jsrXrG_jI/AAAAAAAAxeI/2I4wj4AD4YUcuxWk1-464UVs5OiejZFwQCNcBGAsYHQ/s320/christiann-koepke-0jPuWm8_9wY-unsplash.jpg" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="font-size: 12.8px; text-align: center;"&gt;Part 5 - Fraud detection&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Cloud technology is changing the way payment services are architectured. In this series we will be presenting insight from our customers on adopting open source and cloud technology to modernize their payment service.&lt;br /&gt;&lt;br /&gt;So far we've presented research-based architectural blueprints of&amp;nbsp;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-introduction.html" target="_blank"&gt;omnichannel customer experience&lt;/a&gt;,&amp;nbsp;&lt;a href="https://www.schabell.org/2020/01/integrating-saas-applications-an-introduction.html" target="_blank"&gt;integrating with SaaS applications&lt;/a&gt;, and&amp;nbsp;&lt;a href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" target="_blank"&gt;cloud-native development solutions&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;In&amp;nbsp;&lt;a href="https://www.schabell.org/2020/10/payments-architecture-anti-money-laundering-example.html" target="_blank"&gt;the previous article&lt;/a&gt;&amp;nbsp;in this series we walked through the anti-money laundering physical architecture.&lt;br /&gt;&lt;br /&gt;In this article we're exploring the physical architecture for fraud detection, one based on successful customer solutions.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Blueprints&lt;/h3&gt;&lt;div&gt;As a reminder, the architectural details covered here are base on real customer integration solutions using open source technologies.&lt;br /&gt;&lt;br /&gt;The example scenario presented here is a generic common blueprint that was uncovered researching customer solutions. It's our intent to provide a blueprint that provides guidance and not deep technical details.&lt;br /&gt;&lt;br /&gt;This section covers the visual representations as presented. There are many ways to represent each element in this architectural blueprint, but we've chosen icons, text and colors that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this post, or&amp;nbsp;&lt;a href="https://www.schabell.org/p/contact.html" target="_blank"&gt;contact us&lt;/a&gt;&amp;nbsp;directly with your feedback.&lt;br /&gt;&lt;br /&gt;Now let's take a look at the details in this blueprint and outline the example.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Fraud detection&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The example blueprint shown on the right entitled&amp;nbsp;&lt;i&gt;Fraud detection data example&lt;/i&gt;&amp;nbsp;outlines the solution in a physical architecture. Note that this diagram is focusing on the highest level of the fraud detection solution and the element groupings that apply to this process.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-0GQIu-f-WKw/X23N4z7u93I/AAAAAAAAxkI/EqDgHpBkT_4MK5ed6xXUsNVPweL06i7VACNcBGAsYHQ/s1600/payments-fraud-detection-sd.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="fraud detection" border="0" data-original-height="900" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-0GQIu-f-WKw/X23N4z7u93I/AAAAAAAAxkI/EqDgHpBkT_4MK5ed6xXUsNVPweL06i7VACNcBGAsYHQ/s320/payments-fraud-detection-sd.png" title="" width="320" /&gt;&lt;/a&gt;When you look at&amp;nbsp;&lt;a href="https://www.schabell.org/2020/09/payments-architecture-immediate-payments-example.html" target="_blank"&gt;our previous article&amp;nbsp;&lt;/a&gt;where the immediate payments architecture was laid out as an overview, but if you look closely you'll notice one of the elements was called &lt;i&gt;fraud detection microservices.&amp;nbsp;&lt;/i&gt;This section takes a closer look at what happens behind the scenes to a payments request that triggers a need for fraud processing.&lt;br /&gt;&lt;br /&gt;In this example, starting from the top left corner, a user sends an event or message to execute a payment as an entry point. The users can be mobile, web, or any external device / application that acts as the entry point with the organizations payments architecture.&lt;br /&gt;&lt;br /&gt;This request to execute payments connects through API gateways (not depicted) to internal centralized p&lt;i&gt;ayments event streams&lt;/i&gt;. This element takes these streams and determines what selection or sub-selection of actions need to be taken. For this example, we'll proceed through this architecture as if fraud processing is necessary.&lt;br /&gt;&lt;br /&gt;When an event triggers a compliance issue, such as possible fraudulent transactions, the payment transaction(s) are analysed in&amp;nbsp;&lt;i&gt;transaction scoring and labeling.&amp;nbsp;&lt;/i&gt;It's a collection of rules fueled by data analytics that examine the suspect transactions, score them with a value, and tag them with labels before sending them on for specific evaluation as potentially suspicious transactions.&lt;br /&gt;&lt;br /&gt;Feeding into&amp;nbsp;&lt;i&gt;transaction scoring and labeling&lt;/i&gt;&amp;nbsp;are several elements of interest that provide a bit of data, analysis, and potential for applying artificial intelligence along with machine learning concepts. This starts with&amp;nbsp;&lt;i&gt;know your customer (KYC)&amp;nbsp;&lt;/i&gt;applications that are used to&amp;nbsp;verify the identity, suitability, and risks involved with maintaining a business relationship with each customer. Feeding the&amp;nbsp;&lt;i&gt;KYC&amp;nbsp;&lt;/i&gt;applications is data from&amp;nbsp;&lt;i&gt;customers and transaction data.&amp;nbsp;&amp;nbsp;&lt;/i&gt;Both of these elements are providing input to the&amp;nbsp;&lt;i&gt;model training and serving&lt;/i&gt;&amp;nbsp;elements that generate models for scoring and labeling transactions.&lt;br /&gt;&lt;br /&gt;After modeling, scoring, and labeling suspect transactions, they're sent to&amp;nbsp;&lt;i&gt;fraud detection rules&lt;/i&gt;, a collection of decision services that provide final evaluations and decision making on the suspect transactions. If it's determined the transactions are not fraudulent actions, this outcome's fed back into the&amp;nbsp;&lt;i&gt;payments event stream&amp;nbsp;&lt;/i&gt;in a topic for further clearing processing (not shown in this diagram, see the previous article for clearing and routing architectural details).&lt;br /&gt;&lt;br /&gt;Finally, if the outcome is that the transactions are suspect, then they are passed off to the&amp;nbsp;&lt;i&gt;malicious activity streams&lt;/i&gt;&amp;nbsp;element to start a topic of investigation. The action taken is to&amp;nbsp;start the&amp;nbsp;&lt;i&gt;fraud prevention process&lt;/i&gt;. When investigations into the fraudulent activity is done processing, an event is sent back to the &lt;i&gt;payments event streams&lt;/i&gt;&amp;nbsp;to continue on its journey through the payments architecture&lt;i&gt;.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;The fraud detection architecture blueprint shown here is detailing the internal workings of the scoring, labeling, evanuation, processing, and reporting of suspect fraudulent transactions. It's to be viewed as zooming in on the previous article's single element to provide more details on the physical architecture blueprint for this specific solution.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Project examples&lt;/h3&gt;&lt;div&gt;Sharing the process results for our payments blueprint is what this series is about, but there are project artifacts and diagrams that can also be shared with you the reader. We've pulled together an&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;examples repository&lt;/a&gt;&amp;nbsp;for all our architecture blueprint diagrams.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: right;"&gt;&lt;/div&gt;The&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;Portfolio Architecture Examples&lt;/a&gt;&amp;nbsp;repository makes it possible to collect and share individual images from each diagram element as well as the entire project as a whole.&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: right;"&gt;&lt;a href="https://1.bp.blogspot.com/-4t4sRfvBdlA/X2CrzVQ9sFI/AAAAAAAAxgY/vZ61Z75fKhk3GFBC3ZZlOyGpIJWtBgDngCNcBGAsYHQ/s1600/Screenshot%2B2020-09-15%2Bat%2B13.55.42.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="fraud detection" border="1" data-original-height="232" data-original-width="530" height="139" src="https://1.bp.blogspot.com/-4t4sRfvBdlA/X2CrzVQ9sFI/AAAAAAAAxgY/vZ61Z75fKhk3GFBC3ZZlOyGpIJWtBgDngCNcBGAsYHQ/s320/Screenshot%2B2020-09-15%2Bat%2B13.55.42.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For example, if you scroll down to the file listings on the main page, you can locate all the example physical diagrams as shown on the right.&lt;br /&gt;&lt;div style="text-align: right;"&gt;&lt;/div&gt;&lt;br /&gt;This is the collection associated with payments:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;in this case there are multiple images you can click to view&lt;/li&gt;&lt;li&gt;a project file you can download to your local machine using the&amp;nbsp;&lt;i&gt;Download Diagram&lt;/i&gt;&amp;nbsp;link&lt;/li&gt;&lt;li&gt;a&amp;nbsp;&lt;i&gt;Load Diagram&lt;/i&gt;&amp;nbsp;link that you can&amp;nbsp;&lt;a href="https://redhatdemocentral.gitlab.io/portfolio-architecture-tooling/index.html?#/portfolio-architecture-examples/projects/schematic-diagrams-payments.drawio" target="_blank"&gt;click to automatically open the project diagrams&lt;/a&gt;&amp;nbsp;in the diagram tooling used in this blueprint (use private or incognito browser mode to avoid caching issues and a smoother tooling experience)&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Give it a try and feel free to explore the collection of logical, schematic, detailed, solution, and community diagrams. This should allow you to get started much quicker than from scratch if you can kick-start a project with existing diagrams.&lt;br /&gt;&lt;br /&gt;Should you desire to start designing your own diagrams, please contribute the project file (ending in .drawio) by raising an issue with the file attached. We'd love to continue collecting these projects for others to use.&lt;br /&gt;&lt;br /&gt;Finally, there is a free online&amp;nbsp;&lt;a href="https://redhatdemocentral.gitlab.io/portfolio-architecture-workshops" target="_blank"&gt;beginners guide workshop&lt;/a&gt;&amp;nbsp;available focused on using the diagram tooling, please explore to learn tips and tricks from the experts.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;An overview of the series on the payments portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/09/financial-payments-architecture-an-introduction.html" target="_blank"&gt;An introduction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/09/payments-architecture-common-elements.html" target="_blank"&gt;Common architecture elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/09/payments-architecture-immediate-payments-example.html" target="_blank"&gt;Immediate payments example&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/10/payments-architecture-anti-money-laundering-example.html" target="_blank"&gt;Anti-money laundering example&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/10/payments-architecture-fraud-detection-example.html" target="_blank"&gt;Fraud detection example&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Financial calculations example&lt;/li&gt;&lt;/ol&gt;&lt;ol style="text-align: left;"&gt;&lt;/ol&gt;Catch up on any articles you missed by following one of the links above.&lt;br /&gt;&lt;br /&gt;Next in this series, taking a look at the&amp;nbsp;generic&amp;nbsp;&lt;i&gt;financial calculations example&lt;/i&gt;&amp;nbsp;in a cloud-native architecture focused on payment processing.&lt;br /&gt;&lt;br /&gt;(Article co-authored by&amp;nbsp;&lt;a href="https://www.linkedin.com/in/ramonv/?originalSubdomain=uk" target="_blank"&gt;Ramon Villarreal&lt;/a&gt;)&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4Rg9d11H8Nk:PxPbHHg9zmU:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4Rg9d11H8Nk:PxPbHHg9zmU:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4Rg9d11H8Nk:PxPbHHg9zmU:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4Rg9d11H8Nk:PxPbHHg9zmU:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4Rg9d11H8Nk:PxPbHHg9zmU:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4Rg9d11H8Nk:PxPbHHg9zmU:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4Rg9d11H8Nk:PxPbHHg9zmU:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4Rg9d11H8Nk:PxPbHHg9zmU:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4Rg9d11H8Nk:PxPbHHg9zmU:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4Rg9d11H8Nk:PxPbHHg9zmU:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4Rg9d11H8Nk:PxPbHHg9zmU:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/4Rg9d11H8Nk" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/uDN6qP6Q_II" height="1" width="1" alt=""/&gt;</content><summary>Part 5 - Fraud detectionCloud technology is changing the way payment services are architectured. In this series we will be presenting insight from our customers on adopting open source and cloud technology to modernize their payment service. So far we've presented research-based architectural blueprints of omnichannel customer experience, integrating with SaaS applications, and cloud-native develo...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-10-08T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/4Rg9d11H8Nk/payments-architecture-fraud-detection-example.html</feedburner:origLink></entry><entry><title>Install a signed certificate with Open Liberty 20.0.0.10’s Automatic Certificate Management Environment Support 2.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/KIJsoz8dh50/" /><category term="Java" /><category term="Kubernetes" /><category term="Microservices" /><category term="Security" /><category term="ACME protocol" /><category term="Let's Encrypt" /><category term="OpenLiberty" /><category term="signed certificate" /><author><name>Jakub Pomykala</name></author><id>https://developers.redhat.com/blog/?p=790407</id><updated>2020-10-07T07:00:23Z</updated><published>2020-10-07T07:00:23Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/products/runtimes"&gt;Red Hat Runtimes&lt;/a&gt; now supports the new &lt;a href="https://github.com/OpenLiberty/open-liberty/releases"&gt;Open Liberty 20.0.0.10&lt;/a&gt; Java runtime. Open Liberty 20.0.0.10 features support for the &lt;a target="_blank" rel="nofollow" href="https://tools.ietf.org/html/rfc8555"&gt;Automatic Certificate Management Environment&lt;/a&gt; (ACME) protocol, which automates the process of obtaining a certificate signed by a certificate authority (CA). The Open Liberty 20.0.0.10 release also includes many bug fixes.&lt;/p&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://openliberty.io/"&gt;Open Liberty&lt;/a&gt; is a fast, lightweight &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; runtime for building cloud-native applications and &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices&lt;/a&gt;. It is compatible with MicroProfile and Jakarta EE and enables you to include as much or as little of Liberty as you need to support your application. With releases every four weeks and zero migration, it&amp;#8217;s easier to remain current and avoid technical debt.&lt;/p&gt; &lt;p&gt;In this article, I introduce the new ACME CA Support 2.0 (&lt;code&gt;acmeCA-2.0&lt;/code&gt;) feature, including how to use it to install a CA-signed certificate. Visit Open Liberty&amp;#8217;s GitHub repository to view the &lt;a href="https://github.com/OpenLiberty/open-liberty/issues?q=label%3Arelease%3A200010+label%3A%22release+bug%22+"&gt;list of fixed bugs&lt;/a&gt; for this release.&lt;/p&gt; &lt;h2&gt;Run your apps using Open Liberty 20.0.0.10&lt;/h2&gt; &lt;p&gt;Use the following coordinates to install Open Liberty 20.0.0.10 with &lt;a target="_blank" rel="nofollow" href="https://openliberty.io//guides/maven-intro.html"&gt;Maven&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.openliberty&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;openliberty-runtime&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;20.0.0.10&amp;#60;/version&amp;#62; &amp;#60;type&amp;#62;zip&amp;#60;/type&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;p&gt;For &lt;a target="_blank" rel="nofollow" href="https://openliberty.io//guides/gradle-intro.html"&gt;Gradle&lt;/a&gt;, use:&lt;/p&gt; &lt;pre&gt;dependencies { libertyRuntime group: 'io.openliberty', name: 'openliberty-runtime', version: '[20.0.0.10,)' } &lt;/pre&gt; &lt;p&gt;If you&amp;#8217;re using docker, it&amp;#8217;s:&lt;/p&gt; &lt;pre&gt;FROM open-liberty&lt;/pre&gt; &lt;h2&gt;Install a signed certificate with ACME CA 2.0&lt;/h2&gt; &lt;p&gt;By default, Open Liberty provides a self-signed certificate for transport security (SSL/TLS) support. The self-signed certificate lets you establish transport security right away, but most browsers will mark the certificate as insecure. As a result, users accessing your website will receive a warning or error message.&lt;/p&gt; &lt;p&gt;Having a CA-signed certificate solves this problem, but obtaining one can be costly. In some cases, a signed certificate might not be available during development and testing. A certificate signed by a public certificate authority, such as &lt;a target="_blank" rel="nofollow" href="https://letsencrypt.org/"&gt;Let&amp;#8217;s Encrypt&lt;/a&gt;, offers a middle ground.&lt;/p&gt; &lt;p&gt;With Open Liberty 20.0.0.10, we&amp;#8217;ve added support for the ACME protocol, which automates interactions between a certificate authority and your web server. You can use the new ACME CA 2.0 feature to install a CA-signed certificate for improved testing and user experience.&lt;/p&gt; &lt;h2&gt;Add the acmeCA-2.0 feature in your server.xml&lt;/h2&gt; &lt;p&gt;In your &lt;code&gt;server.xml&lt;/code&gt;, simply provide the directory URI for a certificate authority that uses the ACME 2.0 protocol, along with the domain name for your Open Liberty server. The ACME provider calls back on port 80 to verify domain ownership. Once it has verified ownership, the CA issues a certificate. On starting, the Open Liberty server uses the provided CA directory URI to request the certificate. The CA-signed certificate is installed in the keystore and acts as the default certificate.&lt;/p&gt; &lt;p&gt;To include the ACME CA 2.0 feature in your Open Liberty 20.0.0.10 installation, update your &lt;code&gt;server.xml&lt;/code&gt; as follows:&lt;/p&gt; &lt;pre&gt;&amp;#60;featureManager&amp;#62; &amp;#60;feature&amp;#62;acmeCA-2.0&amp;#60;/feature&amp;#62; &amp;#60;/featureManager&amp;#62; &amp;#60;acmeCA directoryURI="https://acme.host.com/directory" &amp;#62; &amp;#60;domain&amp;#62;theDomainThatIOwn.com&amp;#60;/domain&amp;#62; &amp;#60;accountContact&amp;#62;mailto:my_email_addr@theDomainThatIOwn.com&amp;#60;/accountContact&amp;#62; &amp;#60;/acmeCA&amp;#62; &amp;#60;httpEndpoint host="*" httpPort="80" httpsPort="443" id="defaultHttpEndpoint"/&amp;#62; &amp;#60;keyStore password="password_for_keystore" id="defaultKeyStore"/&amp;#62; &lt;/pre&gt; &lt;p&gt;See the &lt;a target="_blank" rel="nofollow" href="https://tools.ietf.org/html/rfc8555"&gt;ACME specification (RFC8555)&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Automated_Certificate_Management_Environment"&gt;ACME Wikipedia page&lt;/a&gt; for a high-level view of the ACME protocol. See the Let&amp;#8217;s Encrypt homepage for &lt;a target="_blank" rel="nofollow" href="https://letsencrypt.org/how-it-works/"&gt;more information about the ACME protocol and how it works&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Try Open Liberty 20.0.0.10 in Red Hat Runtimes&lt;/h2&gt; &lt;p&gt;Open Liberty is part of Red Hat Runtimes and is available to &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/products/red-hat-runtimes"&gt;Red Hat Runtimes subscribers&lt;/a&gt;. To learn more about deploying Open Liberty applications to &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;, see our Open Liberty guide, &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://openliberty.io/guides/cloud-openshift.html"&gt;Deploying microservices to OpenShift&lt;/a&gt;&lt;/i&gt;. Open Liberty 20.0.0.10 is available through Maven, Gradle, docker, and as a downloadable archive.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F07%2Finstall-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0%2F&amp;#38;linkname=Install%20a%20signed%20certificate%20with%20Open%20Liberty%2020.0.0.10%E2%80%99s%20Automatic%20Certificate%20Management%20Environment%20Support%202.0" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F07%2Finstall-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0%2F&amp;#38;linkname=Install%20a%20signed%20certificate%20with%20Open%20Liberty%2020.0.0.10%E2%80%99s%20Automatic%20Certificate%20Management%20Environment%20Support%202.0" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F07%2Finstall-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0%2F&amp;#38;linkname=Install%20a%20signed%20certificate%20with%20Open%20Liberty%2020.0.0.10%E2%80%99s%20Automatic%20Certificate%20Management%20Environment%20Support%202.0" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F07%2Finstall-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0%2F&amp;#38;linkname=Install%20a%20signed%20certificate%20with%20Open%20Liberty%2020.0.0.10%E2%80%99s%20Automatic%20Certificate%20Management%20Environment%20Support%202.0" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F07%2Finstall-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0%2F&amp;#38;linkname=Install%20a%20signed%20certificate%20with%20Open%20Liberty%2020.0.0.10%E2%80%99s%20Automatic%20Certificate%20Management%20Environment%20Support%202.0" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F07%2Finstall-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0%2F&amp;#38;linkname=Install%20a%20signed%20certificate%20with%20Open%20Liberty%2020.0.0.10%E2%80%99s%20Automatic%20Certificate%20Management%20Environment%20Support%202.0" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F07%2Finstall-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0%2F&amp;#38;linkname=Install%20a%20signed%20certificate%20with%20Open%20Liberty%2020.0.0.10%E2%80%99s%20Automatic%20Certificate%20Management%20Environment%20Support%202.0" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F07%2Finstall-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0%2F&amp;#038;title=Install%20a%20signed%20certificate%20with%20Open%20Liberty%2020.0.0.10%E2%80%99s%20Automatic%20Certificate%20Management%20Environment%20Support%202.0" data-a2a-url="https://developers.redhat.com/blog/2020/10/07/install-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0/" data-a2a-title="Install a signed certificate with Open Liberty 20.0.0.10’s Automatic Certificate Management Environment Support 2.0"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/07/install-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0/"&gt;Install a signed certificate with Open Liberty 20.0.0.10&amp;#8217;s Automatic Certificate Management Environment Support 2.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/KIJsoz8dh50" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Red Hat Runtimes now supports the new Open Liberty 20.0.0.10 Java runtime. Open Liberty 20.0.0.10 features support for the Automatic Certificate Management Environment (ACME) protocol, which automates the process of obtaining a certificate signed by a certificate authority (CA). The Open Liberty 20.0.0.10 release also includes many bug fixes. Open Liberty is a fast, lightweight [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/07/install-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0/"&gt;Install a signed certificate with Open Liberty 20.0.0.10&amp;#8217;s Automatic Certificate Management Environment Support 2.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/07/install-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">790407</post-id><dc:creator>Jakub Pomykala</dc:creator><dc:date>2020-10-07T07:00:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/07/install-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0/</feedburner:origLink></entry><entry><title>Kubernetes integration and more in odo 2.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/6wRR3Cu86CU/" /><category term="DevOps" /><category term="Java" /><category term="Kubernetes" /><category term="Node.js" /><category term="Operator" /><category term="Python" /><category term="codeready" /><category term="deploy Operator" /><category term="devfile" /><category term="odo" /><category term="openshift" /><author><name>Serena Chechile Nichols</name></author><id>https://developers.redhat.com/blog/?p=792387</id><updated>2020-10-06T07:00:04Z</updated><published>2020-10-06T07:00:04Z</published><content type="html">&lt;p&gt;Odo is a &lt;a href="https://developers.redhat.com/blog/2020/06/16/enterprise-kubernetes-development-with-odo-the-cli-tool-for-developers/"&gt;developer-focused command-line interface&lt;/a&gt; (CLI) for OpenShift and Kubernetes. This article introduces highlights of the odo 2.0 release, which now integrates with &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;. Additional highlights include the new default deployment method in odo 2.0, which uses devfiles for rapid, iterative development. We&amp;#8217;ve also moved &lt;a href="https://developers.redhat.com/topics/kubernetes/operators"&gt;Operator deployment&lt;/a&gt; out of experimental mode, so you can easily deploy Operator-backed services from the &lt;code&gt;odo&lt;/code&gt; command line.&lt;/p&gt; &lt;p&gt;&lt;span id="more-792387"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Odo 2.0 now works with core Kubernetes!&lt;/h2&gt; &lt;p&gt;Odo 2.0 lets you write, build, and deploy applications entirely on Kubernetes. You can use any compliant Kubernetes cluster, whether it&amp;#8217;s a hosted cloud provider, a self-managed cluster, or hosted locally with a tool like Minikube.&lt;/p&gt; &lt;p&gt;Odo&amp;#8217;s integration with Kubernetes provides a consistent development experience. You can write applications from scratch, iterate the &lt;a href="https://developers.redhat.com/devnation/tech-talks/odo-iterative-container-based-development"&gt;development inner loop&lt;/a&gt;, and commit your code to Git, all within the same environment.&lt;/p&gt; &lt;p&gt;To initiate your Kubernetes installation, install the Kubernetes &lt;a target="_blank" rel="nofollow" href="https://github.com/operator-framework/operator-lifecycle-manager"&gt;Operator Lifecycle Manager&lt;/a&gt; and &lt;code&gt;etcd&lt;/code&gt;. See the &lt;a target="_blank" rel="nofollow" href="https://operatorhub.io/operator/etcd"&gt;etcd installation guide&lt;/a&gt; on the Kubernetes Operator Hub.&lt;/p&gt; &lt;h2&gt;Deploy with devfiles in odo 2.0&lt;/h2&gt; &lt;p&gt;This major release establishes devfiles as the default deployment method for odo. Odo still supports Source-to-Image (S2I) deployment for developers who prefer using the &lt;code&gt;--s2i&lt;/code&gt; flag from the command line.&lt;/p&gt; &lt;p&gt;A &lt;em&gt;devfile&lt;/em&gt; is a YAML file that is used to define the developer workspace in &lt;a href="https://developers.redhat.com/videos/youtube/S3auoOqwDS8"&gt;Eclipse Che&lt;/a&gt;. Devfiles have an open format, so we can also use them in &lt;code&gt;odo&lt;/code&gt;. Odo&amp;#8217;s support for devfiles lets developers easily switch between tools, with no additional configuration. Using devfiles also streamlines the process of adding new language support to &lt;code&gt;odo&lt;/code&gt;and Eclipse Che. Now, you only need to create a devfile from a template and update.&lt;/p&gt; &lt;p&gt;See the &lt;a target="_blank" rel="nofollow" href="https://odo.dev/docs/deploying-a-devfile-using-odo/"&gt;odo tutorial&lt;/a&gt; for a guide to deploying your first devfile in &lt;code&gt;odo&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;A common definition for your developer tools&lt;/h3&gt; &lt;p&gt;With the odo 2.0 release, we have aligned on devfiles as the common definition format for developer workspaces and application lifecycles across Red Hat&amp;#8217;s developer tooling portfolio. &lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview"&gt;Red Hat CodeReady Workspaces&lt;/a&gt; (the productized version of Eclispe Che) currently uses devfiles, and all of the OpenShift IDE extensions leverage &lt;code&gt;odo&lt;/code&gt;, bringing iterative development and deployment flows directly to developers. You can try out &lt;code&gt;odo&lt;/code&gt; directly or access it using IDE extensions for &lt;a href="https://developers.redhat.com/products/vscode-extensions/overview"&gt;VS Code&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/che/"&gt;Eclipse Che&lt;/a&gt;, and the &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/ide/"&gt;Eclipse desktop IDE&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Improved language support&lt;/h3&gt; &lt;p&gt;Adding devfiles as the default deployment method improves language support in odo 2.0. To see the list of currently supported devfile components, open your &lt;code&gt;odo&lt;/code&gt; CLI and run:&lt;/p&gt; &lt;pre&gt;$ odo catalog list components &lt;/pre&gt; &lt;p&gt;Table 1 shows the currently available &lt;code&gt;odo&lt;/code&gt; components, including devfile components.&lt;/p&gt; &lt;table align="center"&gt; &lt;caption&gt;Table 1: Odo devfile components&lt;/caption&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;Name&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Registry&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;java-maven&lt;/td&gt; &lt;td&gt;Upstream Maven and OpenJDK 11&lt;/td&gt; &lt;td&gt;DefaultDevfileRegistry&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;java-openliberty&lt;/td&gt; &lt;td&gt;Open Liberty microservice in Java&lt;/td&gt; &lt;td&gt;DefaultDevfileRegistry&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;java-quarkus&lt;/td&gt; &lt;td&gt;Upstream Quarkus with Java+GraalVM&lt;/td&gt; &lt;td&gt;DefaultDevfileRegistry&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;java-springboot&lt;/td&gt; &lt;td&gt;Spring Boot using Java&lt;/td&gt; &lt;td&gt;DefaultDevfileRegistry&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;nodejs&lt;/td&gt; &lt;td&gt;Stack with NodeJS 12&lt;/td&gt; &lt;td&gt;DefaultDevfileRegistry&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;Odo&amp;#8217;s new deployment model is available for &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; using &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt;, &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;Node.js&lt;/a&gt;, and early access for &lt;a href="https://developers.redhat.com/blog/category/python/"&gt;Python&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Sample starters for new projects&lt;/h3&gt; &lt;p&gt;As another advantage of using devfiles, you can now leverage sample starters to scaffold new projects. Simply use the &lt;code&gt;odo create&lt;/code&gt; command to provide the name of your devfile component. Odo will pull a cloned local copy of a starter from the associated Git repository. Here&amp;#8217;s an example:&lt;/p&gt; &lt;pre&gt;$ odo create nodejs --starter Validation  ✓  Checking devfile existence [22411ns]  ✓  Checking devfile compatibility [22492ns]  ✓  Creating a devfile component from registry: DefaultDevfileRegistry [24341ns]  ✓  Validating devfile component [74471ns] Starter Project  ✓  Downloading starter project nodejs-starter from https://github.com/odo-devfiles/nodejs-ex.git [479ms] Please use `odo push` command to create the component with source deployed &lt;/pre&gt; &lt;h2&gt;Debugging with odo&lt;/h2&gt; &lt;p&gt;With this release, the &lt;code&gt;odo debug&lt;/code&gt; command has graduated from tech preview. See the odo tutorial for more about &lt;a target="_blank" rel="nofollow" href="https://odo.dev/docs/debugging-using-devfile/"&gt;debugging application components with the odo CLI or VS Code&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Using Operators for installation&lt;/h2&gt; &lt;p&gt;Developers can now deploy Operator-backed services with &lt;code&gt;odo&lt;/code&gt;. Operators provide custom resource definitions (CRDs), which you can use to create service instances—also known as custom resources (CRs), or operands. You can then use these instances in your projects and link them to your components.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s an example, using the &lt;code&gt;etcd&lt;/code&gt; Operator to deploy an Etcd cluster:&lt;/p&gt; &lt;pre&gt;$ odo catalog list services   Operators available in the cluster   NAME                          CRDs  etcdoperator.v0.9.4           EtcdCluster, EtcdBackup, EtcdRestore $ odo service create etcdoperator.v0.9.4/EtcdCluster &lt;/pre&gt; &lt;p&gt;See the odo tutorial for more about &lt;a target="_blank" rel="nofollow" href="https://odo.dev/docs/operator-hub/#deploying-operator-backed-service-to-a-cluster-via-yaml"&gt;deploying Operator-backed services with odo&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F06%2Fkubernetes-integration-and-more-in-odo-2-0%2F&amp;#38;linkname=Kubernetes%20integration%20and%20more%20in%20odo%202.0" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F06%2Fkubernetes-integration-and-more-in-odo-2-0%2F&amp;#38;linkname=Kubernetes%20integration%20and%20more%20in%20odo%202.0" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F06%2Fkubernetes-integration-and-more-in-odo-2-0%2F&amp;#38;linkname=Kubernetes%20integration%20and%20more%20in%20odo%202.0" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F06%2Fkubernetes-integration-and-more-in-odo-2-0%2F&amp;#38;linkname=Kubernetes%20integration%20and%20more%20in%20odo%202.0" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F06%2Fkubernetes-integration-and-more-in-odo-2-0%2F&amp;#38;linkname=Kubernetes%20integration%20and%20more%20in%20odo%202.0" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F06%2Fkubernetes-integration-and-more-in-odo-2-0%2F&amp;#38;linkname=Kubernetes%20integration%20and%20more%20in%20odo%202.0" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F06%2Fkubernetes-integration-and-more-in-odo-2-0%2F&amp;#38;linkname=Kubernetes%20integration%20and%20more%20in%20odo%202.0" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F06%2Fkubernetes-integration-and-more-in-odo-2-0%2F&amp;#038;title=Kubernetes%20integration%20and%20more%20in%20odo%202.0" data-a2a-url="https://developers.redhat.com/blog/2020/10/06/kubernetes-integration-and-more-in-odo-2-0/" data-a2a-title="Kubernetes integration and more in odo 2.0"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/06/kubernetes-integration-and-more-in-odo-2-0/"&gt;Kubernetes integration and more in odo 2.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/6wRR3Cu86CU" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Odo is a developer-focused command-line interface (CLI) for OpenShift and Kubernetes. This article introduces highlights of the odo 2.0 release, which now integrates with Kubernetes. Additional highlights include the new default deployment method in odo 2.0, which uses devfiles for rapid, iterative development. We&amp;#8217;ve also moved Operator deployment out of experimental mode, so you can easily deploy [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/06/kubernetes-integration-and-more-in-odo-2-0/"&gt;Kubernetes integration and more in odo 2.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/06/kubernetes-integration-and-more-in-odo-2-0/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">792387</post-id><dc:creator>Serena Chechile Nichols</dc:creator><dc:date>2020-10-06T07:00:04Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/06/kubernetes-integration-and-more-in-odo-2-0/</feedburner:origLink></entry><entry><title>CodeReady Containers - Getting Started with OpenShift Container Platform 4.5 and Decision Manager Tooling</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0DSID4pnaa8/codeready-containers-getting-started-with-ocp-45-and-decision-manager-tooling.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="CodeReadyContainers" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-codeready_containers_getting_started_with_openshift_container_platform_4_5_and_decision_manager_tooling</id><updated>2020-10-08T17:33:11Z</updated><published>2020-10-05T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-4Rs3JaM6ne4/X3ddBFq5MdI/AAAAAAAAxk4/Y1gM9X2hSK0rMIx-bTvlcOmIU6Yd47TUACNcBGAsYHQ/s2048/jon-tyson-PXB7yEM5LVs-unsplash.jpg" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="2048" data-original-width="1536" height="200" src="https://1.bp.blogspot.com/-4Rs3JaM6ne4/X3ddBFq5MdI/AAAAAAAAxk4/Y1gM9X2hSK0rMIx-bTvlcOmIU6Yd47TUACNcBGAsYHQ/w150-h200/jon-tyson-PXB7yEM5LVs-unsplash.jpg" width="150" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; For some time now we've been working on updating your experience using CodeReady Containers, a container platform installation for your local machine, by providing interesting developer tooling and project examples.&amp;nbsp;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;The first example here is the latest version of the Red Hat Decision Manager installed on OpenShift Container Platform (either your own installation or using our &lt;a href="https://www.schabell.org/2020/09/how-to-setup-openshift-container-platform-45.html" target="_blank"&gt;CodeReady Containers installation&lt;/a&gt;).&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Get started today with rules and business logic in just a few simple steps, as follows.&amp;nbsp;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;There is no better way to learn about container technologies, container platforms, and container-based application development than getting hands-on with great open technologies.&amp;nbsp;&lt;/div&gt;&lt;span&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;/span&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;This demo is to install Red Hat Decision Manager in the Cloud based on leveraging a Red Hat OpenShift Container Platform. It delivers a fully functioning Decision Manager containerized on OpenShift Container Platform.&lt;/div&gt;&lt;div&gt;&lt;div data-sourcepos="3:1-4:70" dir="auto"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 data-sourcepos="7:1-9:131"&gt;Install on OpenShift Container Platform&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-lOy42L6FlZA/X3dbMEui4AI/AAAAAAAAxkg/EnNt4FQ7rtoUZtqckhYg85GHokiZFm4BQCNcBGAsYHQ/s1543/rhdm-build-rhdmauthor.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="code ready containers" border="0" data-original-height="827" data-original-width="1543" height="172" src="https://1.bp.blogspot.com/-lOy42L6FlZA/X3dbMEui4AI/AAAAAAAAxkg/EnNt4FQ7rtoUZtqckhYg85GHokiZFm4BQCNcBGAsYHQ/w320-h172/rhdm-build-rhdmauthor.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/h3&gt;&lt;div data-sourcepos="9:1-10:83" dir="auto"&gt;There are two options to install and run this project on the OpenShift Container Platform; use your own existing installation or to install on &lt;a href="https://www.schabell.org/2020/09/how-to-setup-openshift-container-platform-45.html" target="_blank"&gt;CodeReady Containers which provides you with a local OpenShift cluster&lt;/a&gt;.&lt;/div&gt;&lt;ol data-sourcepos="12:1-13:0" dir="auto"&gt;&lt;li data-sourcepos="12:1-13:0"&gt;Ensure you have an OpenShift container based installation, such as one of the following:&lt;/li&gt;&lt;/ol&gt;&lt;ul data-sourcepos="14:3-17:0" style="text-align: left;"&gt;&lt;li&gt;your own OpenShift installation, if using this you just need to pass the IP address to the init.{sh|bat} script.&lt;/li&gt;&lt;li data-sourcepos="16:3-17:0"&gt;&lt;div data-sourcepos="16:5-16:95"&gt;&lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo"&gt;Code Ready Containers Easy Install&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol data-sourcepos="18:1-23:0" start="2" style="text-align: left;"&gt;&lt;li data-sourcepos="18:1-19:0"&gt;&lt;div data-sourcepos="18:4-18:146"&gt;&lt;a href="https://gitlab.com/redhatdemocentral/rhcs-rhdm-install-demo/-/archive/master/rhcs-rhdm-install-demo-master.zip"&gt;Download and unzip this demo.&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&lt;li data-sourcepos="18:1-19:0"&gt;&lt;div data-sourcepos="18:4-18:146"&gt;Run 'init.sh' or 'init.bat' file. 'init.bat' must be run with Administrative privileges:&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre class="code highlight js-syntax-highlight plaintext dark" lang="plaintext"&gt;&lt;code&gt;&lt;span class="line" id="LC1" lang="plaintext"&gt; # If using CodeReady Containers Easy Install project, just add the cluster address&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC2" lang="plaintext"&gt; # to HOST_IP variable found at the top of the init.{sh|bat} files, for example:&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC3" lang="plaintext"&gt; #&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC4" lang="plaintext"&gt; # HOST_IP=api.crc.testing &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC5" lang="plaintext"&gt; # &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC6" lang="plaintext"&gt; # Now run the script without arguments and it picks up that hostname as follows:&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC7" lang="plaintext"&gt; #&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC8" lang="plaintext"&gt; $ ./init.sh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div data-sourcepos="42:1-42:140" dir="auto"&gt;&lt;a href="https://www.blogger.com/blog/post/edit/3868547292717970492/2667182560341544792#" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="Red Hat Decision Manager" border="0" data-original-height="988" data-original-width="1600" height="197" src="https://1.bp.blogspot.com/-jn-qDgri7Ag/XhLqljebByI/AAAAAAAAw1A/ewJyAbDlq5YD4VjMg4I0AqLAzGk89D0FwCEwYBhgL/s320/rhdm-ocp.png" title="" width="320" /&gt;&lt;/a&gt;Now log in to Red Hat Decision Manager to start developing containerized process automation projects (the address will be generated by OCP):&lt;/div&gt;&lt;ul data-sourcepos="44:3-45:0" dir="auto"&gt;&lt;li data-sourcepos="44:3-45:0"&gt;CodeReady Container example: http:rhcs-rhdm-install-demo-appdev-in-cloud.apps-crc.testing/decision-central ( u:erics / p:redhatdm1! )&lt;/li&gt;&lt;/ul&gt;&lt;div data-sourcepos="46:1-46:195" dir="auto"&gt;Not sure how to get started with Red Hat Decision Manager? Try one of these&amp;nbsp;&lt;a href="https://www.blogger.com/blog/post/edit/3868547292717970492/2667182560341544792#" rel="nofollow noreferrer noopener"&gt;online workshops&lt;/a&gt;&amp;nbsp;to build a first project from scratch.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=vMaeJDMSLpQ:UJBoSR2HJYU:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=vMaeJDMSLpQ:UJBoSR2HJYU:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=vMaeJDMSLpQ:UJBoSR2HJYU:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=vMaeJDMSLpQ:UJBoSR2HJYU:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=vMaeJDMSLpQ:UJBoSR2HJYU:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=vMaeJDMSLpQ:UJBoSR2HJYU:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=vMaeJDMSLpQ:UJBoSR2HJYU:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=vMaeJDMSLpQ:UJBoSR2HJYU:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=vMaeJDMSLpQ:UJBoSR2HJYU:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=vMaeJDMSLpQ:UJBoSR2HJYU:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=vMaeJDMSLpQ:UJBoSR2HJYU:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/vMaeJDMSLpQ" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0DSID4pnaa8" height="1" width="1" alt=""/&gt;</content><summary>For some time now we've been working on updating your experience using CodeReady Containers, a container platform installation for your local machine, by providing interesting developer tooling and project examples.  The first example here is the latest version of the Red Hat Decision Manager installed on OpenShift Container Platform (either your own installation or using our CodeReady Containers ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-10-05T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/vMaeJDMSLpQ/codeready-containers-getting-started-with-ocp-45-and-decision-manager-tooling.html</feedburner:origLink></entry></feed>
